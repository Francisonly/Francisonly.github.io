<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>String回顾及从JVM分析String常量池问题.md</title>
      <link href="/2019/08/26/string-hui-gu-ji-cong-jvm-fen-xi-string-chang-liang-chi/"/>
      <url>/2019/08/26/string-hui-gu-ji-cong-jvm-fen-xi-string-chang-liang-chi/</url>
      
        <content type="html"><![CDATA[<h3 id="1、字符串特点"><a href="#1、字符串特点" class="headerlink" title="1、字符串特点"></a>1、字符串特点</h3><p>​    <code>String</code> 类代表字符串。<strong><em>Java 程序中的所有字符串字面值（如 <code>&quot;abc&quot;</code> ）都作为此类的实例实现。即程序中所有双引号的字符串都是String类的对象，即使没有new关键字</em></strong>。<br>    1.字符串是常量，<strong>内容永不可变</strong>；<br>    2.正是因为内容不可变，所以字符串可以共享使用,达到节省内存的作用；<br>    3.字符串效果上相当于字符数组char[],但底层是字节数组byte[]。</p><h3 id="2、3-1种构造方法"><a href="#2、3-1种构造方法" class="headerlink" title="2、3+1种构造方法"></a>2、3+1种构造方法</h3><p>​    1.public String( );创建一个空白字符串，不含有任何内容;<br>    2.public  String(char[ ] array);根据字符数组的内容，来创建对应的字符串；<br>    3.public String(byte[ ] array);根据字符数组的内容，来创建对应的字符串；<br>    4.直接创建。</p><h3 id="3、常用方法"><a href="#3、常用方法" class="headerlink" title="3、常用方法"></a>3、常用方法</h3><p>​    3.1比较方法<br>        地址值比较 ==；<br>        内容比较 equals()，忽律大小写永equalgnoreCase()；<br>        <strong><em>equals()注意事项</em></strong>：<br>            1.任何对象都能用object接收；<br>            2、对称性<br>            3、<font color="red"><strong><em>如果比较双方一个常量一个变量，推荐把字符串常量放在前边</em></strong></font>；<br></p><pre class=" language-java"><code class="language-java">String str1 <span class="token operator">=</span> null<span class="token punctuation">;</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>报错 空指针异常</code></pre><p>​    3.2获取相关方法<br>        1.public int length() -长度；<br>        2.public String concat(String str)-拼接;<br>        3.public Char charAt(int index)-获取制定索引位置的字符，索引从0开始;<br>        4.public int indexOf(String str)-查找参数字符串在 本字符串中首次出现的位置，如果没有返回-1；</p><p>​    3.3字符串截取方法<br>        1.public String sunstring(int index)，截取从参数位置一直到字符串末尾，返回新字符串；<br>        2..public String sunstring(int begin,int end),注意<strong><em>左闭右开</em></strong>。</p><p>​    3.4转换相关方法<br>        1<u>.public char[ ] toCharArray( ) -将当前字符串转换成字符数组作为返回值</u>；<br>        2.public byte[ ] getByte( ) -获得当前字符串的底层字节数组；<br>        3.public String replace(oldster,newstr) </p><p>​    3.5字符串分割方法<br>        1.public String[ ] split(String regex) - 按照参数规则，将字符串分成若干方法。<br>        <strong><em>注意事项：split()方法是一个正则表达式，如果按照英文句点切分，必须写”\.“</em></strong>。</p><h3 id="4、String常量池"><a href="#4、String常量池" class="headerlink" title="4、String常量池"></a>4、String常量池</h3><p>​    在讲常量池之前我们先来做个测试：</p><pre class=" language-Java"><code class="language-Java">import java.util.Arrays;public class DemoString {    public static void main(String[] args) {        String str1 = "abc";        String str2 = "abc";        String str3 = new String("abc");        String str4 = new String("abc");        char[] arr = {'a', 'b', 'c'};        String str5 = new String(arr);        String str6 = new String("abc").intern();        System.out.println("str1 == str2:" + (str1 == str2));        System.out.println("str1.equals(str2):" + str1.equals(str2));        System.out.println("str1 == str3:" + (str1 == str3));        System.out.println("str1.equals(str3):" + str1.equals(str3));        System.out.println("str3 == str4:" + (str3 == str4));        System.out.println("str3.equals(str4)):" + (str3.equals(str4)));        System.out.println("str1 == str5" + (str1 == str5));        System.out.println("str1.equals(str5)" + str1.equals(str5));//t        //System.out.println(str1 == arr);编译错误 不可比较的类型        System.out.println("str1.equals(arr):" + str1.equals(arr));        System.out.println("str1.equals(Arrays.toString(arr))" + str1.equals(Arrays.toString(arr)));        System.out.println(Arrays.toString(arr));        System.out.println("str1 == str6:" + (str1 == str6));        System.out.println("str3 == str6:" + (str3 == str6));        System.out.println("-------------------");        String str7 = "";        String str8 = "";        System.out.println("str7 == str8:" + (str7 == str8));        System.out.println("str7.equals(str8):" + str7.equals(str8));        String str9 = null;        String str10 = null;        System.out.println("str7 == str9:" + (str7 == str9));        System.out.println("str7.equals(str9):" + str7.equals(str9));        System.out.println("str9 == str10:" + (str9 == str10));        System.out.println("str9.equals(str10):" + str9.equals(str10));//空指针异常    }}</code></pre><pre class=" language-java"><code class="language-java">str1 <span class="token operator">==</span> str2<span class="token operator">:</span><span class="token boolean">true</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>str1 <span class="token operator">==</span> str3<span class="token operator">:</span><span class="token boolean">false</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str3<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>str3 <span class="token operator">==</span> str4<span class="token operator">:</span><span class="token boolean">false</span>str3<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>str1 <span class="token operator">==</span> str5falsestr1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str5<span class="token punctuation">)</span><span class="token boolean">true</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">false</span>str1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>Arrays<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token boolean">false</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span>str1 <span class="token operator">==</span> str6<span class="token operator">:</span><span class="token boolean">true</span>str3 <span class="token operator">==</span> str6<span class="token operator">:</span><span class="token boolean">false</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>str7 <span class="token operator">==</span> str8<span class="token operator">:</span><span class="token boolean">true</span>str7<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str8<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">true</span>str7 <span class="token operator">==</span> str9<span class="token operator">:</span><span class="token boolean">false</span>str7<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>str9<span class="token punctuation">)</span><span class="token operator">:</span><span class="token boolean">false</span>str9 <span class="token operator">==</span> str10<span class="token operator">:</span><span class="token boolean">true</span>Exception in thread <span class="token string">"main"</span> java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>NullPointerException    at DemoString<span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span>DemoString<span class="token punctuation">.</span>java<span class="token operator">:</span><span class="token number">36</span><span class="token punctuation">)</span></code></pre><p>字符串常量池机制<br>    目的：JVM为了提高性能和减少内存开销，实现数据共享。<br>    1.为字符串开辟一个字符串常量池(存在于方法区);<br>    2.创建字符串常量时，首先判断字符串常量池是否存在该字符串;<br>    3.存在该字符串，返回引用实例，不存在，实例化字符串并放入池中。<br>    注意:直接通过双引号创建的string，就在常量池中。<br>            对于基本类型来说，==是数值的比较；<br>            对于引用类型来说，==是地址值的比较。</p><p>​    从JVM角度分析：<br>        String str1 = “abc”,创建的String str引用放在栈中，在堆中存在一块内存区域-字符串常量池。字符串对象保存在常量池中，不过它保存的也是一个地址值（后面提到的字节数组的地址值）。在堆中会存在byte字节数组来存储”abc”。即<strong><em>JVM在创建”abc”的时候，其实是把它转换为了字节数组，字符串常量池中的对象保存的其实是这个字节数组的地址，字符串对象自身也有一个地址，这个地址值保存在栈中的对象引用str1</em></strong>。在创建String str2 = “abc”的时候,会发现池中已经存在”abc”字节数组的地址，所以这个地址会被重复利用，不会创建新的对象。<br>        对于char[ ] charArray = {‘a’, ‘b’, ‘c’},char[ ] charArray保存的也是一个地址（数组在堆内存的地址），数组存在堆内存。String str3 = new String(charArray);存在new关键字和常量池无关，会把char型数组转换为字节数组。new开辟新的内存创建一个String对象，这个对象保存字节数组的地址。这个对象本身也有一个地址，该地址保存在栈中的对象引用str3。</p><p>​    <img src="https://note.youdao.com/yws/public/resource/6005eef28414280a33f98a67b48ab0ff/xmlnote/a570033337f89d2b0354a4fbb2afb1c0/336" alt></p><p>​    关于String intern()方法，即使是new的情况下也会放入常量池。</p><p>​    关于空字符串””和null，String str7 = “”，开辟了内存，只是没有存储任何字符，String str9 = null，没有开辟内存。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://b23.tv/av51570815/p136" target="_blank" rel="noopener">字符串的常量池</a></p><p><a href="https://b23.tv/av31658943" target="_blank" rel="noopener">对String常量池的理解</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>深入理解多态</title>
      <link href="/2019/08/05/shen-ru-li-jie-duo-tai/"/>
      <url>/2019/08/05/shen-ru-li-jie-duo-tai/</url>
      
        <content type="html"><![CDATA[<h3 id="1、什么是多态"><a href="#1、什么是多态" class="headerlink" title="1、什么是多态"></a>1、什么是多态</h3><p>1.1 概念 </p><p>​    引用Charlie Calverts对多态的描述——<strong>多态性是允许你将父对象设置成为一个或更多的他的子对象相等的技术，赋值之后，父对象就可以根据当前赋值给它的子对象的特性以不同的方式运作</strong>。简单的说，就是一句话：允许将子类类型的指针赋值给父类类型的指针。</p><p>表现：父类引用指向子类对象。</p><p>格式：Fu obj = new Zi ( );<br>  或者 接口名称 obj = new 实现类名称（）；</p><p><img src="https://note.youdao.com/yws/public/resource/6005eef28414280a33f98a67b48ab0ff/xmlnote/WEBRESOURCE8eee6c6dc1543cc750ad43b956caf4a5/328" alt="多态概念"></p><p>1.2 多态的两种形式</p><p>​    编译时多态：<br>        <em> 编译期间决定目标方法<br>        </em> 通过重载实现<br>        * 方法名相同，参数不同</p><p>​    运行时多态：<br>        <em> 运行期间决定目标方法<br>        </em> 同名同参<br>        <em> 通过重写和继承实现<br>        </em> JVM决定目标法方法</p><p>1.3  三个前提    </p><ul><li>继承</li><li>重写</li><li>父类引用指向子类对象</li></ul><p>1.4 作用</p><p>​    通用角度:<br>     把不同的子类对象当成父类来用（即向上转型），可以屏蔽不同子类对象的差异，写出通用的代码。做出通用的编程，以适应需求的不断变化。<br>特异性角度：<br>    赋值以后，父类型的引用就可以根据当前赋值的子对象之间的差异以不同的方式运作。也就是说父亲的行为像儿子，而不是儿子的行为像父亲。</p><h3 id="2、多态中成员变量-方法的访问"><a href="#2、多态中成员变量-方法的访问" class="headerlink" title="2、多态中成员变量/方法的访问"></a>2、多态中成员变量/方法的访问</h3><p>​    先说结果，对于访问成员变量和成员方法，多态有自己的一套准则：<br>1、访问成员变量，编译看左，运行看左；<br>2、访问成员方法，编译看左，运行看右（<strong><em>只针对重写了的方法</em></strong>）； <br>3、访问静态方法，编译看左，运行看左。<br> 总的来说就记住这么一句，<strong>多态中只有非静态的成员方法才是编译看父类，而运行时看子类，也即是实际调用的是子类方法</strong>。</p><p>​    例子：<strong>花木兰替父从军</strong><br>        1、花木兰替父亲花弧从军。那么这时候花木兰是子类，花弧是父类。<br>        2、花弧有自己的成员属性年龄，姓名，性别。花木兰也有这些属性，但是很明显二者的属性完全不一样。<br>        3、花弧有自己的非静态成员方法‘骑马杀敌’，同样花木兰也遗传了父亲一样的方法‘骑马杀敌’。<br>        4、花弧有自己的非静态成员方法‘骑马杀敌’，同样花木兰也遗传了父亲一样的方法‘骑马杀敌’。<br>    但是，现在花木兰替父从军，女扮男装。这时候相当于父类的引用（花弧这个名字）指向了子类对象（花木兰这个人），那么在其他类（其他的人）中访问子类对象（花木兰这个人）的成员属性（姓名，年龄，性别）时，其实看到的都是花木兰她父亲的名字（花弧）、年龄（60岁）、性别（男）。当访问子类对象（花木兰这个人）的非静态成员方法（骑马打仗）时，其实都是看到花木兰自己运用十八般武艺在骑马打仗。当访问花木兰的静态方法时（自我介绍），花木兰自己都是用她父亲的名字信息在向别人作自我介绍。并且这时候花木兰不能使用自己特有的成员方法‘涂脂抹粉’。—–<strong>多态中的向上转型</strong>。<br>    那么终于一将功成万骨枯，打仗旗开得胜了，花木兰告别了战争生活。有一天，遇到了自己心爱的男人，这时候爱情的力量将父类对象的引用（花弧这个名字）强制转换为子类对象本来的引用（花木兰这个名字），那么花木兰又从新成为了她自己，这时候她完全是她自己了。名字是花木兰，年龄是28，性别是女，打仗依然那样生猛女汉子，自我介绍则堂堂正正地告诉别人我叫花木兰。OMG！终于，终于可以使用自己特有的成员方法‘涂脂抹粉’了。从此，花木兰完全回到了替父从军前的那个花木兰了。并且和自己心爱的男人幸福的过完了一生。—–<strong>多态中的向下转型</strong>。<br><strong><em>注意：</em></strong>向上/下转型一定是在多态这个前提下，向上转型有一个弊端，对象一旦向上转型，就不能调用子类特有方法。解决方案-向下转型，格式：子类 obj = (子类) 父类对象。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> huamulan<span class="token punctuation">.</span>tfcj<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Huahu</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> <span class="token string">"花弧"</span><span class="token punctuation">;</span>    String sex <span class="token operator">=</span> <span class="token string">"男"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我叫花弧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">void</span>  <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花弧骑马杀人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> huamulan<span class="token punctuation">.</span>tfcj<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Huamulan</span> <span class="token keyword">extends</span> <span class="token class-name">Huahu</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    String name <span class="token operator">=</span> <span class="token string">"花木兰"</span><span class="token punctuation">;</span>    String sex <span class="token operator">=</span> <span class="token string">"女"</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">makeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花木兰涂脂抹粉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">void</span>  <span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花木兰骑马杀人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> huamulan<span class="token punctuation">.</span>tfcj<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span> <span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>        Huahu huamulan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Huamulan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//访问成员变量</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>huamulan<span class="token punctuation">.</span>name <span class="token operator">+</span> huamulan<span class="token punctuation">.</span>age <span class="token operator">+</span> huamulan<span class="token punctuation">.</span>sex<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//访问骑马杀敌方法</span>        huamulan<span class="token punctuation">.</span><span class="token function">kill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//访问父类特有方法</span>        huamulan<span class="token punctuation">.</span><span class="token function">intro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//访问子类特有方法编译错误，这是因为对象一旦向上转型，就不能调用子类特有方法</span>       <span class="token comment" spellcheck="true">// huamulan.makeUp();</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Huamulan huamulan1 <span class="token operator">=</span> <span class="token punctuation">(</span>Huamulan<span class="token punctuation">)</span> huamulan<span class="token punctuation">;</span>        huamulan1<span class="token punctuation">.</span><span class="token function">makeUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    </p><pre class=" language-java"><code class="language-java">结果：花弧<span class="token number">60</span>男 花木兰骑马杀人我叫花弧<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>花木兰涂脂抹粉</code></pre><h3 id="3、多态实现机制"><a href="#3、多态实现机制" class="headerlink" title="3、多态实现机制"></a>3、多态实现机制</h3><p>​    接下来，我们来看一下jvm是如何识别目标方法的。<br>    刚才我们说到，重载方法的区分在编译阶段已经完成了，那么我们就可以认为在java虚拟机中不存在重载这一概念。因此，重载也可以被称为<strong>静态绑定，</strong>而重写则被称为动态绑定。<br>在jvm中，我们有5种方法调用的指令，分别是：<br>invokestatic：调用静态方法；<br>invokespecial：调用实例构造方法，私有方法和父类方法，以及使用super关键字调用父类的实例方法或构造器；<br><strong><em>invokevirtual：调用虚方法(非私有实例方法)；</em></strong><br>invokeinterface：调用接口方法，在运行时再确定一个实现此接口的对象；<br>invokedynamic：在运行时动态解析出调用点限定符所引用的方法之后，调用该方法(jdk1.8lamada表达式)；<br>    这里，我们简单介绍一下这几种指令，对于invokestatic指令和invokespecial指令而言，java虚拟机能够直接识别目标方法，也就是我们所说的<strong>静态绑定</strong>。invokevirtual和invokeinterface指令则需要在执行的过程中才能找到目标方法，也就是我们所说的<strong>动态绑定</strong>。只要能被<code>invokestatic</code>和<code>invokespecial</code>指令调用的方法，都可以在类加载过程中的解析阶段中确定唯一的调用版本，<strong>符合这个条件的方法有静态方法、私有方法、实例构造器和父类方法四种，它们在类加载过程中的解析阶段就会将符号引用解析为该方法的直接引用。这些方法可以称为非虚方法（也就是不涉及到多态的方法）</strong>，与之对应的就是虚方法。虚方法需要在运行阶段才能确定目标方法的直接引用。</p><p>总结一下静态/动态绑定和虚/非虚方法的概念：<br>    1、静态绑定：在程序执行之前就已经被绑定、也就是说再编译阶段就已经知道这个方法是属于哪个类的方法。                 1.private修饰的方法，不能被子类调用   2.  被final修饰的方法（可以调用，不能重写）      3.被static修饰的方法    2、动态绑定：在运行过程中根据调用者的动态类型来识别目标方法的情况。<br>    3、<strong>动态绑定中，我们会记录方法对应的实际引用的地址，也可以理解为索引值，这里我们把它叫做方法表。方法表使用了数组的数据结构，每个数组元素指向了当前类以及其祖先类中非私有的实例方法。这个数据结构，便是java虚拟机实现动态绑定的关键所在</strong>。<br></p><p><img src="https://note.youdao.com/yws/public/resource/6005eef28414280a33f98a67b48ab0ff/xmlnote/9bc611b10c058fbda913cbdc7c01e0e7/332" alt></p><p><img src="https://note.youdao.com/yws/public/resource/6005eef28414280a33f98a67b48ab0ff/xmlnote/WEBRESOURCEe157882bb03da1b95398fe4d38f6d838/334" alt></p><p>​    4、虚/非虚方法：除了静态方法之外，声明为final或者private的实例方法是非虚方法。其它（其他非private方法）实例方法都是虚方法。 静态方法也是非虚方法，被重写的都是虚方法。</p><h3 id="4、一个经典例子"><a href="#4、一个经典例子" class="headerlink" title="4、一个经典例子"></a>4、一个经典例子</h3><p>（一）相关类</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>           <span class="token keyword">public</span> String <span class="token function">show</span><span class="token punctuation">(</span>D obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"A and D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>            <span class="token keyword">public</span> String <span class="token function">show</span><span class="token punctuation">(</span>A obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"A and A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span>    <span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">B</span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token punctuation">{</span>           <span class="token keyword">public</span> String <span class="token function">show</span><span class="token punctuation">(</span>B obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"B and B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>          <span class="token keyword">public</span> String <span class="token function">show</span><span class="token punctuation">(</span>A obj<span class="token punctuation">)</span><span class="token punctuation">{</span>                 <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"B and A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span>   <span class="token keyword">class</span> <span class="token class-name">D</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">{</span><span class="token punctuation">}</span>  </code></pre><p>（二）问题：以下输出结果是什么？</p><ol><li>A a1 = <strong>new</strong> A();  </li><li>​        A a2 = <strong>new</strong> B();  </li><li>​        B b = <strong>new</strong> B();  </li><li>​        C c = <strong>new</strong> C();   </li><li>​        D d = <strong>new</strong> D();   </li><li>​        System.out.println(a1.show(b));   ①  </li><li>​        System.out.println(a1.show(c));   ②  </li><li>​        System.out.println(a1.show(d));   ③  </li><li>​        System.out.println(a2.show(b));   ④  </li><li>​        System.out.println(a2.show(c));   ⑤  </li><li>​        System.out.println(a2.show(d));   ⑥  </li><li>​        System.out.println(b.show(b));    ⑦  </li><li>​        System.out.println(b.show(c));    ⑧  </li><li>​        System.out.println(b.show(d));    ⑨     </li></ol><p>（三）答案</p><p>①   A and A</p><p>②   A and A</p><p>③   A and D</p><p>④   B and A</p><p>⑤   B and A</p><p>⑥   A and D</p><p>⑦   B and B</p><p>⑧   B and B</p><p>⑨   A and D</p><p>（四）分析</p><p>​    实际上这里涉及方法调用的优先问题 ，<strong><em>优先级由高到低依次为：this.show(O)、super.show(O)、this.show((super)O)、super.show((super)O)</em></strong>。<br>    比如④，a2.show(b)，a2是一个引用变量，类型为A，则this为a2，b是B的一个实例，于是它到类A里面找show(B obj)方法，没有找到，于是到A的super(超类)找，而A没有超类，因此转到第三优先级this.show((super)O)，this仍然是a2，这里O为B，(super)O即(super)B即A，因此它到类A里面找show(A obj)的方法，类A有这个方法，但是由于a2引用的是类B的一个对象，B覆盖了A的show(A obj)方法，因此最终锁定到类B的show(A obj)，输出为”B and A”。<br>    再比如⑧，b.show(c)，b是一个引用变量，类型为B，则this为b，c是C的一个实例，于是它到类B找show(C obj)方法，没有找到，转而到B的超类A里面找，A里面也没有，因此也转到第三优先级this.show((super)O)，this为b，O为C，(super)O即(super)C即B，因此它到B里面找show(B obj)方法，找到了，由于b引用的是类B的一个对象，因此直接锁定到类B的show(B obj)，输出为”B and B”。<br>    <strong><em>当超类对象引用变量引用子类对象时，被引用对象的类型而不是引用变量的类型决定了调用谁的成员方法，但是这个被调用的方法必须是在超类中定义过的，也就是说被子类覆盖的方法。还是拿a2.show(b)来说吧</em></strong>。<br>    a2是一个引用变量，类型为A，它引用的是B的一个对象，因此这句话的意思是由B来决定调用的是哪个方法。因此应该调用B的show(B obj)从而输出”B and B”才对。但是为什么跟前面的分析得到的结果不相符呢？！问题在于我们不要忽略了蓝色字体的后半部分，那里特别指明：这个被调用的方法必须是在超类中定义过的，也就是被子类覆盖的方法。B里面的show(B obj)在超类A中有定义吗？没有！那就更谈不上被覆盖了。实际上这句话隐藏了一条信息：它仍然是按照方法调用的优先级来确定的。它在类A中找到了show(A obj)，如果子类B没有覆盖show(A obj)方法，那么它就调用A的show(A obj)（由于B继承A，虽然没有覆盖这个方法，但从超类A那里继承了这个方法，从某种意义上说，还是由B确定调用的方法，只是方法是在A中实现而已）；现在子类B覆盖了show(A obj)，因此它最终锁定到B的show(A obj)。这就是那句话的意义所在，到这里，我们可以清晰的理解Java的多态性了。</p><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="https://blog.csdn.net/free4294/article/details/39054791" target="_blank" rel="noopener">Java多态性 的详细举例说明 </a></p><p><a href="https://blog.csdn.net/sinat_33921105/article/details/82023924" target="_blank" rel="noopener">你知道多态的实现机制吗?是时候好好回顾一下了！</a></p><p><a href="https://blog.csdn.net/qq_32519415/article/details/87284411" target="_blank" rel="noopener">多态：JVM是如何进行方法调用的</a></p><p><a href="https://blog.csdn.net/q982151756/article/details/81588284" target="_blank" rel="noopener">细说JVM（虚拟机实现多态）</a></p><p><a href="https://b23.tv/av31547919" target="_blank" rel="noopener">谈谈对Java多态的理解</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合系列03-Set</title>
      <link href="/2019/07/04/java-ji-he-xi-lie-03-set/"/>
      <url>/2019/07/04/java-ji-he-xi-lie-03-set/</url>
      
        <content type="html"><![CDATA[<p>​    Set接口的特点：1、不允许元素重复；2、无序的集合。  </p><h3 id="1、HashSet"><a href="#1、HashSet" class="headerlink" title="1、HashSet"></a>1、HashSet</h3><p>​    HashSet特点：1、不允许存储重复元素；<br>                            2、没有索引，没有带索引的方法，不能使用普通的for循环；<br>                            3、无序集合，存储取出顺序可能不同；<br>                            4、底层是哈希表（查询速度非常快)；  </p><p>下面用一个demo展示set的无序性：  </p><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> demo<span class="token punctuation">.</span>hashset<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Set<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoHashSet</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Set<span class="token operator">&lt;</span>String<span class="token operator">></span> set<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"wu"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"zeng"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"使用Iterator遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n使用增强for循环遍历"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>String s <span class="token operator">:</span> set<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>s<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>打印结果：  </p><pre class=" language-java"><code class="language-java">使用Iterator遍历zeng zhou wu 使用增强<span class="token keyword">for</span>循环遍历zeng zhou wu </code></pre><h3 id="2、哈希表"><a href="#2、哈希表" class="headerlink" title="2、哈希表"></a>2、哈希表</h3><p>​    在学习哈希表之前我们先来学习一下哈希值。哈希值是一个十进制的整数，由系统随机给出，是对象的逻辑地址。int hasCode()返回对象的哈希码值。   </p><p>​    哈希表——HashSet存储数据的结构。如果链表的结构超过了8位，那么就会把链表转换成红黑树 。 <br>Java1.8之前：哈希表=数组+链表；<br>Java1.8之后：哈希表=数组+链表/红黑树。<br>特点：查询速度快。 <br>    先把元素根据哈希值进行分组，将相同哈希值的元素用链表连接起来</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79gy1g4ordwzoq8j30ly0bdgn3.jpg" alt="屏幕快照 2019-07-05 10.33.09">    </p><h3 id="3、Set集合不重复原理"><a href="#3、Set集合不重复原理" class="headerlink" title="3、Set集合不重复原理"></a>3、Set集合不重复原理</h3><p>​    Set集合在调用add()方法时，会先调用元素的hasCode()和equals()方法，判断元素是否重复。<br>(1)set.add();<br>(2)object.hasCode();<br>(3)判断是否哈希冲突（哈希值相同）<br>    (3.1）哈希冲突<br>        (3.1.1)调用equals方法判断是否相同{<br>            (3.1.1.1)true <br>                抛弃，不存储<br>            (3.1.1.2)false<br>                存储<br>    (3.2)哈希值不同<br>        存储在不同的索引处</p><p>以第2小节中的图为例说明：<br>    三个字符串”abc“、”重地“和”通话“。重地和通话的的哈希值相同，与abc的哈希值不同。首先添加abc，调用它的hasCode()方法，没有产生哈希冲突，就将abc放在哈希表的某个索引处。<br>    然后，添加”重地”，没有产生哈希冲突，就将abc放在哈希表的某个索引处。<br>    最后，添加”通话“，产生哈希冲突，调用equals()方法，判断“重地”和“通话”是否相同，显然不同，所以就用链表将二者连接在了同一个索引处。<br>    前提：<strong><em>重写hasCode()和equals()方法</em></strong>。</p><p>Demo:<br>    创建一个Person类，在HashSet中添加三个Person类的对象，然后分别在四种情况下打印结果遍历打印结果。<br> </p><table><thead><tr><th></th><th style="text-align:center">重写toString()方法</th><th style="text-align:center">重写hasCode()方法</th><th style="text-align:center">重写equals()方法</th><th style="text-align:left">打印结果</th></tr></thead><tbody><tr><td>Case1</td><td style="text-align:center">✔️</td><td style="text-align:center">✖️</td><td style="text-align:center">✖️</td><td style="text-align:left">demo.hashset2.Person@2752f6e2<br>demo.hashset2.Person@e580929<br>demo.hashset2.Person@6b71769e</td></tr><tr><td>Case2</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:center">✖️</td><td style="text-align:left">name:qian  age:20<br>name:zhao  age:18<br>name:zhao  age:18</td></tr><tr><td>Case3</td><td style="text-align:center">✔️</td><td style="text-align:center">✖️</td><td style="text-align:center">✔️</td><td style="text-align:left">name:qian  age:20<br>name:zhao  age:18<br>name:zhao  age:18</td></tr><tr><td>Case4</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:center">✔️</td><td style="text-align:left">name:zhao  age:18<br>name:qian  age:20</td></tr></tbody></table><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> demo<span class="token punctuation">.</span>hashset2<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Person</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> age<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span>Object obj<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Person</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Person p <span class="token operator">=</span> <span class="token punctuation">(</span>Person<span class="token punctuation">)</span> obj<span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">==</span> p<span class="token punctuation">.</span>age<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token string">"name:"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">" age:"</span> <span class="token operator">+</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> demo<span class="token punctuation">.</span>hashset2<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>HashSet<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoHashSet2</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhao"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"qian"</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Person p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"zhao"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        HashSet set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/*没有重写toStrign()、hasCode()和equals()的打印结果：         *demo.hashset2.Person@2752f6e2         *demo.hashset2.Person@e580929         *demo.hashset2.Person@6b71769e         **/</span>        <span class="token comment" spellcheck="true">/*重写toString方法的打印结果         *name:qian age:20         *name:zhao age:18         *name:zhao age:18         **/</span>        <span class="token comment" spellcheck="true">/*重写hasCode()没有重写hasCode()方法的打印结果：         *name:zhao age:18         *name:zhao age:18         *name:qian age:20         **/</span>        <span class="token comment" spellcheck="true">/*重写equals()方法没有重写hasCode()方法         *name:qian age:20         *name:zhao age:18         *name:zhao age:18         **/</span>        <span class="token comment" spellcheck="true">/*name:zhao age:18         *name:qian age:20         **/</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Object o <span class="token operator">:</span> set<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    </p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java知识点系列01-重载和重写</title>
      <link href="/2019/07/01/java-zhi-shi-dian-xi-lie-01-chong-zai-he-chong-xie/"/>
      <url>/2019/07/01/java-zhi-shi-dian-xi-lie-01-chong-zai-he-chong-xie/</url>
      
        <content type="html"><![CDATA[<h3 id="1、重载-Overload"><a href="#1、重载-Overload" class="headerlink" title="1、重载  Overload"></a>1、重载  Overload</h3><ul><li><p>定义：重载，简单说，就是函数或者方法有<strong>相同的名称</strong>，但是<strong><em>参数列表不相同的情形</em></strong>，这样的<strong>同名不同参数</strong>的函数或者方法之间，互相称之为重载函数或者方法。  </p></li><li><p>适用场景：<strong>有多个功能类似的方法，但是参数列表不一样</strong>。  </p></li><li><p>优点：只需要记住一个方法名，实现类似的功能。  </p></li><li><p><strong>因素</strong>：       1、参数个数不同；eg. f(int a, int b)与 f(int a,int b, int c)  </p><p>​                  2、参数类型不同;  eg.f(int a)与f(double a);   </p><p>​                  3、参数类型顺序不同；eg.f(int a, double b)与f(double a, int b;  </p><p>​                  4、<strong><em>与返回值和参数名称无关</em></strong></p><ul><li>特点：1、在使用重载时只能通过相同的方法名、不同的参数形式来实现。<br>            2、不能通过访问权限、返回类型和抛出的异常进行重载。<br>            3、方法的异常类型和数目不会对重载造成影响。</li></ul></li><li><p>Demo :    </p><p>​    有三个方法，分别是sumTwo(int a, int b)，返回两个int类型数据的和, sumThree(int a, int b,int c),返回三个int类型数据的和， sumTwoDouble(double a, double b)，返回两个double 类型的数据的和。三个方法功能类似，参数列表不同，采用重载，改为同一个方法名sum。<strong>那么我们怎么知道每次调用的是三个方法中哪个方法呢？</strong>  </p><p>​    ——根据输入的参数。</p></li></ul><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">/**   * @project DemoOverload   * @date 2019/6/30   */</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoOverload</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原来的sunTwo方法，结果是"</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原来的sunThree方法，结果是"</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原来的sunTwoDouble方法，结果是"</span> <span class="token operator">+</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">10.0</span><span class="token punctuation">,</span> <span class="token number">20.0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">double</span> a<span class="token punctuation">,</span> <span class="token keyword">double</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>          <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token comment" spellcheck="true">/*public static int sumTwo(int a, int b) {          return a+b;      }      public static int sumThree(int a, int b,int c) {          return a+b+c;      }      public static double sumTwoDouble(double a, double b) {          return a+b;      }*/</span>  <span class="token punctuation">}</span></code></pre><p>打印结果：</p><pre class=" language-java"><code class="language-java">  原来的sunTwo方法，结果是<span class="token number">30</span>  原来的sunThree方法，结果是<span class="token number">60</span>  原来的sunTwoDouble方法，结果是<span class="token number">30.0</span></code></pre><h3 id="2、重写-Override"><a href="#2、重写-Override" class="headerlink" title="2、重写 Override"></a>2、重写 Override</h3><ul><li><p>定义：子类对父类的允许访问的方法的实现过程进行重新编写, 返回值和形参都不能改变。<strong>即外壳不变，核心重写！</strong>  </p></li><li><p>优点：子类可以根据需要，定义特定于自己的行为。 也就是说子类能够根据需要实现父类的方法。  </p></li><li><p>注意事项：1、父子类方法的名称、参数都相同。</p><p>​                  2、@Override写在前面，检查是否正确重写，也可以不写；  </p><p>​                  3、子类方法的返回值必须<strong>小于等于</strong>父类返回值范围（public&gt;protected&gt;default&gt;private）；  </p><p>​                  4、子类方法的权限（修饰符）必须<strong>大于等于</strong>父类权限；</p><p>​                 5、<strong>重写的方法所抛出的异常必须和被重写方法的所抛出的异常一致，或者是其子类</strong>； </p><p>​                 6、<strong>被重写的方法不能为private，否则在其子类中只是新定义了一个方法，并没有对其进行重写</strong>；</p><p>​                 7、<strong>静态方法不能被重写为非静态的方法（会编译出错）</strong>。</p></li></ul><p>Demo：定义一个抽象类Animal和一个抽象方法eat。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @project 抽象类Animal * @date 2019/6/30 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>Cat类继承Animal类，并对其抽象方法eat进行重写（继承抽象类必须重写父类的抽象方法）。</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * @project: Cat类 * @data: 19/07/01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Cat cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        cat<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3、重载和重写区别"><a href="#3、重载和重写区别" class="headerlink" title="3、重载和重写区别"></a>3、重载和重写区别</h3><p>重载：函数名一样，参数列表不同；<br>重写：函数名和参数 都一样。<br>    <strong>*本质上的不同在于，因为函数有相似的功能所以才用重载。正是因为我们希望子类方法和父类方法的反应不同，才采用了重写。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Java知识点 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合系列01-总体框架</title>
      <link href="/2019/06/23/java-ji-he-xi-lie-01-zong-ti-kuang-jia/"/>
      <url>/2019/06/23/java-ji-he-xi-lie-01-zong-ti-kuang-jia/</url>
      
        <content type="html"><![CDATA[<h3 id="1、总体框架"><a href="#1、总体框架" class="headerlink" title="1、总体框架"></a>1、总体框架</h3><p>​    Java集合是java提供的工具包，包含了常用的数据结构：集合、链表、队列、栈、数组、映射等。Java集合工具包位置是java.util.* Java集合主要可以划分为4个部分：List列表、Set集合、Map映射、工具类(Iterator迭代器、Enumeration枚举类、Arrays和Collections)、。 Java集合工具包框架图(如下)：</p><p><img src="http://ww4.sinaimg.cn/large/006tNc79ly1g4bkcajdzej30g40dn0v2.jpg" alt="屏幕快照 2019-06-23 16.48.20"></p><h3 id="2、容器分类"><a href="#2、容器分类" class="headerlink" title="2、容器分类"></a>2、容器分类</h3><p>Java容器可分为两大类：</p><ul><li>Collection<ul><li>List<ul><li>ArrayList</li><li>LinkedList</li><li>Vector</li></ul></li><li>Set<ul><li>HashSet  </li><li>LinkedHashSet</li><li>TreeSet</li></ul></li></ul></li><li>Map<ul><li>HashMap  </li><li>LinkedHashMap</li><li>TreeMap</li><li>ConcurrentHashMap</li><li>Hashtable<br>为了更清晰的表示下面用思维导图进行说明：<br><img src="http://ww3.sinaimg.cn/large/006tNc79ly1g4c964sf9sj30uw0r20ur.jpg" alt="容器"></li></ul></li></ul><p>参考资料:  </p><p><a href="http://www.cnblogs.com/skywang12345/p/3308498.html" target="_blank" rel="noopener">Java 集合系列01之 总体框架</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484122&amp;idx=1&amp;sn=c3bd6436b3e661ae15cb9d7154d82b89&amp;chksm=ebd743dbdca0cacdcb272576f4be48c466bd73160a87227314e8fb21d5e4f9156c23902198ab#rd" target="_blank" rel="noopener">Collection总览</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合系列02-List</title>
      <link href="/2019/06/23/java-ji-he-xi-lie-02-list/"/>
      <url>/2019/06/23/java-ji-he-xi-lie-02-list/</url>
      
        <content type="html"><![CDATA[<p>​    List是一个继承于Collection的接口，即List是集合中的一种。List是有序的队列，List中的每一个元素都有一个索引；第一个元素的索引值是0，往后的元素的索引值依次+1。和Set不同，List中允许有重复的元素。  <br>    关于API方面。既然List是继承于Collection接口，它自然就包含了Collection中的全部函数接口；由于List是有序队列，它也额外的有自己的API接口。主要有“添加、删除、获取、修改指定位置的元素”、“获取List中的子队列”等。</p><h3 id="1、-ArrayList"><a href="#1、-ArrayList" class="headerlink" title="1、 ArrayList"></a>1、 ArrayList</h3><p>​    ArrayList 继承了AbstractList，实现了List。它是一个数组队列，提供了相关的添加、删除、修改、遍历等功能。</p><ul><li><p>ArrayList是<strong>基于动态数组实现的</strong>，在<strong>增删时候，需要数组的拷贝复制</strong>。</p></li><li><p><strong>ArrayList的默认初始化容量是10，每次扩容时候增加原先容量的一半，也就是变为原来的1.5倍</strong></p></li><li><p>删除元素时不会减少容量，<strong>若希望减少容量则调用trimToSize()</strong></p></li><li><p>它不是线程安全的。它能存放null值。<br></p><p>下面通过一个demo来学习如何使用ArrayList的常用API。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>ArrayList<span class="token punctuation">;</span><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>Iterator<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">arrayListDemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ArrayList al <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//增 add（）</span>        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"周"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"吴"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"郑"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"add 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> al<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//删 remove()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nremove 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//\nd的使用</span>        al<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> al<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 插入 add（index，objece）；改 set（）</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n插入 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        al<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"周"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> al<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nset 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        al<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">"王"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> al<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//查 get()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nget 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        al<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历1 随机访问，通过索引值去遍历 ；上面已用到</span>        <span class="token comment" spellcheck="true">//遍历2 Iteratir</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\niterator 测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator iterator <span class="token operator">=</span> al<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//遍历3 增强for循环</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\n增强for循环测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object o <span class="token operator">:</span> al<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>o <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//isEmpty();contains()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nisEmpty()测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\nisContains()测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>al<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"周"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//toArray()</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"\ntoArray()测试"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Object<span class="token punctuation">[</span><span class="token punctuation">]</span> oArray <span class="token operator">=</span> al<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> oArray<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>oArray<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>​    </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//运行结果</span>add 测试周 吴 郑 王 remove 测试吴 郑 王 插入 测试周 吴 郑 王 set 测试王 吴 郑 王 get 测试王iterator 测试王 吴 郑 王 增强<span class="token keyword">for</span>循环测试王 吴 郑 王 <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>测试<span class="token boolean">false</span><span class="token function">isContains</span><span class="token punctuation">(</span><span class="token punctuation">)</span>测试<span class="token boolean">false</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>测试王吴郑王</code></pre><h3 id="2、Vector"><a href="#2、Vector" class="headerlink" title="2、Vector"></a>2、Vector</h3><p>​    Vector是矢量队列，支持相关的添加、删除、遍历等功能，提供了随机访问的功能。Vector的底层也是数组，与ArrayList最大的区别就是；同步（线程安全）。Vector是同步的，如果想要ArrayList实现同步，可以使用Collections的方法：List list = Collections.synchronizedList(new ArrayList(…))就可以实现同步了。ArrayList在底层数组不够用时在原来的基础上扩展0.5倍，Vector是扩展1倍。 </p><h3 id="3、LinkedList"><a href="#3、LinkedList" class="headerlink" title="3、LinkedList"></a>3、LinkedList</h3><p>​    LinkedList的底层是双向链表，它的顺序访问会非常高效，而随机访问效率比较低。它可以被当作堆栈、队列或双端队列进行操作。但是LinkedList也实现了List接口，也就是说它实现了get(int location)、remove(int location)等根据索引值来获取、删除节点的函数。LinkedList是如何实现List的这些接口的，如何将“<strong>双向链表和索引值联系起来的</strong>”？<br>    实际原理非常简单，它就是通过一个计数索引值来实现的。例如，当我们调用get(int location)时，首先会比较“location”和“双向链表长度的1/2”；若前者大，则从链表头开始往后查找，直到location位置；否则，从链表末尾开始先前查找，直到location位置。<br>下面通过一个demo来学习如何使用ArrayList的常用API。<br></p><pre class=" language-java"><code class="language-java"><span class="token keyword">import</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span>*<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">linkedListdemo</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        LinkedList ll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//独有的addFirst和addLast方法</span>        ll<span class="token punctuation">.</span><span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ll<span class="token punctuation">.</span><span class="token function">addLast</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历1 iterrator</span>        Iterator iterator  <span class="token operator">=</span> ll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//遍历2增强型for循环</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Object o <span class="token operator">:</span> ll<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>o<span class="token operator">+</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//打印结果</span><span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">4</span> </code></pre><h3 id="4、List总结"><a href="#4、List总结" class="headerlink" title="4、List总结"></a>4、List总结</h3><table><thead><tr><th style="text-align:center">类</th><th style="text-align:center">数据结构</th><th style="text-align:center">线程</th><th>适用场景</th></tr></thead><tbody><tr><td style="text-align:center">ArrayList</td><td style="text-align:center">数组</td><td style="text-align:center">不安全</td><td>随机访问</td></tr><tr><td style="text-align:center">LinkedList</td><td style="text-align:center">双链表</td><td style="text-align:center">不安全</td><td>快速插入、删除元素</td></tr><tr><td style="text-align:center">Vector</td><td style="text-align:center">数组</td><td style="text-align:center">安全</td><td>List可能同时被多个线程操作</td></tr></tbody></table><p>​    <strong>LinkedList和ArrayList性能差异分析</strong>：通过add(int index, E element)向LinkedList插入元素时。先是在双向链表中找到要插入节点的位置index；找到之后，再插入一个新节点。双向链表查找index位置的节点时，有一个加速动作：若index &lt; 双向链表长度的1/2，则从前向后查找; 否则，从后向前查找<br>ArrayList的add(int index, E element)函数<strong><em>会移动index之后所有元素</em></strong>.通过get(int index)获取ArrayList第index个元素时。直接返回数组中index位置的元素，而不需要像LinkedList一样进行查找。<br></p><p><em>ArrayList增删慢不是绝对的(在数量大的情况下，已测试)：<br>如果增加元素一直是使用add()(增加到末尾)的话，那是ArrayList要快<br>一直删除末尾的元素也是ArrayList要快【不用复制移动位置】<br>至于如果删除的是中间的位置的话，还是ArrayList要快！<br>但一般来说：增删多还是用LinkedList，因为上面的情况是极端的</em></p><p>参考资料：</p><p><a href="https://mp.weixin.qq.com/s?__biz=MzI4Njg5MDA5NA==&amp;mid=2247484130&amp;idx=1&amp;sn=4052ac3c1db8f9b33ec977b9baba2308&amp;chksm=ebd743e3dca0caf51b170fd4285345c9d992a5a56afc28f2f45076f5a820ad7ec08c260e7d39#rd" target="_blank" rel="noopener">List集合就这么简单【源码剖析】</a></p><p><a href="https://www.cnblogs.com/skywang12345/p/3323085.html" target="_blank" rel="noopener">Java 集合系列03之 ArrayList详细介绍(源码解析和使用示例</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java集合系列目录</title>
      <link href="/2019/06/23/java-ji-he-xi-lie-mu-lu/"/>
      <url>/2019/06/23/java-ji-he-xi-lie-mu-lu/</url>
      
        <content type="html"><![CDATA[<p>​    好记性不如烂博客，写java集合系列文章的目的一方面自己学习整理回顾总结，另一方面如有不当之处希望能得到大家的的批评指正。写技术文章前参考学习了很多的博客、视频，在此谢谢这些乐于分享的创作者们，我也希望参与进来，发扬这种开源分享的精神，能帮助到新人就更好了。在无止境的知识面前，永远都是新人～</p><p><a href="https://francisonly.github.io/2019/06/23/java-ji-he-xi-lie-01-zong-ti-kuang-jia/">Java集合系列01-总体框架</a></p><p><a href="https://francisonly.github.io/2019/06/23/java-ji-he-xi-lie-02-list/">Java集合系列02-List</a></p><p><a href="https://francisonly.github.io/2019/07/04/java-ji-he-xi-lie-03-set/">Java集合系列03-set</a></p>]]></content>
      
      
      <categories>
          
          <category> Java基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 集合 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>1、ns3系列-抽象概念</title>
      <link href="/2019/06/06/ns3-xi-lie-01-chou-xiang-gai-nian/"/>
      <url>/2019/06/06/ns3-xi-lie-01-chou-xiang-gai-nian/</url>
      
        <content type="html"><![CDATA[<h3 id="1-1节点"><a href="#1-1节点" class="headerlink" title="1.1节点"></a>1.1节点</h3><p>​    在因特网术语中，任何一台连接到网络的计算设备被称为主机，亦称为终端。 ns -3是一个网络模拟器，而非一个专门的因特网模拟器，为此我们避开术语“主机”，因为这个词太容易让人联想到因特网和及其相关协议。因此，我们选用了一个来源于图论，在其他网络模拟器中亦广泛使用的术语：节点。</p><p>​    ns-3中基本计算设备被抽象为节点。节点由C++中的Node类来描述。Node类提供了用于管理仿真器中网络组件表示的各种方法。</p><p>​    <strong>你应该将节点设想为一台可以添加各种功能的计算机。为了使一台计算机有效地工作，我们可以给它添加应用程序，协议栈，外设卡及驱动程序等。NS3采用了与此相同的模型。</strong></p><h3 id="1-2应用程序"><a href="#1-2应用程序" class="headerlink" title="1.2应用程序"></a>1.2应用程序</h3><p>​    计算机软件通常可分为两大类： 系统软件和应用软件。系统软件根据计算模型配置和管理计算机中的各种资源，例如内存，处理器周期，硬盘，网络等。系统软件通常并不直接使用这些资源来完成用户任务。用户往往需要运行应用程序来完成一些特定的任务，而应用程序需要使用由系统软件控制的资源。</p><p>​    通常，系统软件和应用软件的界线表现为特权级的变化，而这种变化是通过操作系统的自陷功能（operating system traps）来实现的。在ns-3中并没有真正的操作系统的概念，更没有特权级别或者系统调用的概念。然而，我们有应用程序的概念。正如“现实世界”中在计算机上运行应用程序以执行各种任务一样，ns-3仿真环境中的应用程序在节点上运行来驱动模拟过程。</p><p>​    <strong>在ns-3中，需要被仿真的用户程序被抽象为应用。应用在C++中用Application类来描述。这个类提供了管理仿真时用户层应用的各种方法。开发者应当用面向对象的方法自定义和创建新的应用。在本教程中，我们会使用Application类的实例：UdpEchoClientApplication 和UdpEchoServerApplication。也许你已经猜到了，这些应用程序包含了一个client/server应用来发送和回应仿真网络中的数据包。</strong></p><h3 id="1-3信道"><a href="#1-3信道" class="headerlink" title="1.3信道"></a>1.3信道</h3><p>​    在现实世界中，人们可以把计算机连接到网络上。通常我们把网络中数据流流过的媒介称为信道。当你把以太网线插入到墙壁上的插孔时，你正通过信道将计算机与以太网连接。在ns-3的模拟环境中，你可以把节点连接到代表数据交换信道的对象上。在这里，基本的通信子网这一抽象概念被称为信道，在C++中用Channel类来描述。</p><p>​    Channel类提供了管理通信子网对象和把节点连接至它们的各种方法。信道类同样可以由开发者以面向对象的方法自定义。一个信道实例可以模拟一条简单的线缆（wire），也可以模拟一个复杂的巨型以太网交换机，甚至无线网络中充满障碍物的三维空间。</p><p>​    我们在本教程中将使用几个信道模型的实例，包括：CsmaChannel, PointToPointChannel和WifiChannel。举例来说，CsmaChannel信道模拟了用于一个可以实现载波侦听多路访问通信子网中的媒介。这个信道具有和以太网相似的功能。</p><h3 id="1-4网络设备"><a href="#1-4网络设备" class="headerlink" title="1.4网络设备"></a>1.4网络设备</h3><p>​    以前，如果想把一台计算机连接到网络上，你就必须买一根特定的网络线缆，并在你的计算机上安装称为外设卡的硬件设备。能够实现网络功能的外接卡被称为网络接口卡（网卡）。现在大多数计算机出厂时已经配置了网卡，所以用户看不到这些的模块。</p><p>​    一张网卡如果缺少控制硬件的软件驱动是不能工作的。在Unix（或者Linux）系统中，外围硬件被划为 “设备<em>”**。</em>设备通过驱动程序来控制，而网卡通过网卡驱动程序来控制。在Unix和Linux系统中，网卡被称为像eth0这样的名字。</p><p>​    在ns-3中，网络设备这一抽象概念相当于硬件设备和软件驱动的总和。NS3仿真环境中，网络设备相当于安装在节点上，使得节点通过信道和其他节点通信。像真实的计算机一样，一个节点可以通过多个网络设备同时连接到多条信道上。</p><p>​    网络设备由C++中的NetDevice类来描述。NetDevice类提供了管理连接其他节点和信道对象的各种方法，并且允许开发者以面向对象的方法来自定义。我们在本教程中将使用几个特定的网络设备的实例，它们分别是CsmaNetDevice, PointToPointNetDevice, 和 WifiNetDevice。正如以太网卡被设计成在以太网中工作一样，CsmaNetDevice被设计成在csma信道中工作，而PointToPointNetDevice 在PointToPoint信道中工作，WifiNetNevice在wifi信道中工作。</p><h3 id="1-5拓扑生成器"><a href="#1-5拓扑生成器" class="headerlink" title="1.5拓扑生成器"></a>1.5拓扑生成器</h3><p>​    以前，如果想把一台计算机连接到网络上，你就必须买一根特定的网络线缆，并在你的计算机上安装称为外设卡的硬件设备。能够实现网络功能的外接卡被称为网络接口卡（网卡）。现在大多数计算机出厂时已经配置了网卡，所以用户看不到这些的模块。</p><p>​    一张网卡如果缺少控制硬件的软件驱动是不能工作的。在Unix（或者Linux）系统中，外围硬件被划为 “设备<em>”**。</em>设备通过驱动程序来控制，而网卡通过网卡驱动程序来控制。在Unix和Linux系统中，网卡被称为像eth0这样的名字。</p><p>​    在ns-3中，网络设备这一抽象概念相当于硬件设备和软件驱动的总和。NS3仿真环境中，网络设备相当于安装在节点上，使得节点通过信道和其他节点通信。像真实的计算机一样，一个节点可以通过多个网络设备同时连接到多条信道上。</p><p>​    网络设备由C++中的NetDevice类来描述。NetDevice类提供了管理连接其他节点和信道对象的各种方法，并且允许开发者以面向对象的方法来自定义。我们在本教程中将使用几个特定的网络设备的实例，它们分别是CsmaNetDevice, PointToPointNetDevice, 和 WifiNetDevice。正如以太网卡被设计成在以太网中工作一样，CsmaNetDevice被设计成在csma信道中工作，而PointToPointNetDevice 在PointToPoint信道中工作，WifiNetNevice在wifi信道中工作。</p>]]></content>
      
      
      <categories>
          
          <category> ns3从0开始 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ns3 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
